
83usartdmatx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003d00  08003d00  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d00  08003d00  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000012c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aea0  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a58  00000000  00000000  0002aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbd7  00000000  00000000  0002d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf51  00000000  00000000  0004d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0002  00000000  00000000  000592c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001192c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf0  00000000  00000000  00119314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003cb0 	.word	0x08003cb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08003cb0 	.word	0x08003cb0

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa72 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f814 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8c6 	bl	8000370 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f89e 	bl	8000324 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f86c 	bl	80002c4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TxData, sizeof(TxData));
 80001ec:	221b      	movs	r2, #27
 80001ee:	4904      	ldr	r1, [pc, #16]	; (8000200 <main+0x2c>)
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x30>)
 80001f2:	f002 fcab 	bl	8002b4c <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 80001f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fa:	f000 fac7 	bl	800078c <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TxData, sizeof(TxData));
 80001fe:	e7f5      	b.n	80001ec <main+0x18>
 8000200:	20000000 	.word	0x20000000
 8000204:	20000044 	.word	0x20000044

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b0a6      	sub	sp, #152	; 0x98
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fd42 	bl	8003ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2258      	movs	r2, #88	; 0x58
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fd34 	bl	8003ca0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000254:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000266:	4618      	mov	r0, r3
 8000268:	f000 ff7a 	bl	8001160 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f8b9 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 ffb8 	bl	8002208 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029e:	f000 f8a3 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 f9e1 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b8:	f000 f896 	bl	80003e8 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3798      	adds	r7, #152	; 0x98
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <MX_USART1_UART_Init+0x5c>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART1_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART1_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART1_UART_Init+0x58>)
 8000308:	f002 fbd2 	bl	8002ab0 <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000312:	f000 f869 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000044 	.word	0x20000044
 8000320:	40013800 	.word	0x40013800

08000324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_DMA_Init+0x48>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a0f      	ldr	r2, [pc, #60]	; (800036c <MX_DMA_Init+0x48>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <MX_DMA_Init+0x48>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2100      	movs	r1, #0
 8000346:	200e      	movs	r0, #14
 8000348:	f000 fb1f 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800034c:	200e      	movs	r0, #14
 800034e:	f000 fb38 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2100      	movs	r1, #0
 8000356:	200f      	movs	r0, #15
 8000358:	f000 fb17 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800035c:	200f      	movs	r0, #15
 800035e:	f000 fb30 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0x74>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <MX_GPIO_Init+0x74>)
 800037c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0x74>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0x74>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <MX_GPIO_Init+0x74>)
 8000394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_GPIO_Init+0x74>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_GPIO_Init+0x74>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	; 0x28
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a4f      	ldr	r2, [pc, #316]	; (8000598 <HAL_UART_MspInit+0x15c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	f040 8098 	bne.w	8000590 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000460:	4b4e      	ldr	r3, [pc, #312]	; (800059c <HAL_UART_MspInit+0x160>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a4d      	ldr	r2, [pc, #308]	; (800059c <HAL_UART_MspInit+0x160>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b4b      	ldr	r3, [pc, #300]	; (800059c <HAL_UART_MspInit+0x160>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b48      	ldr	r3, [pc, #288]	; (800059c <HAL_UART_MspInit+0x160>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a47      	ldr	r2, [pc, #284]	; (800059c <HAL_UART_MspInit+0x160>)
 800047e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b45      	ldr	r3, [pc, #276]	; (800059c <HAL_UART_MspInit+0x160>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000490:	4b42      	ldr	r3, [pc, #264]	; (800059c <HAL_UART_MspInit+0x160>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a41      	ldr	r2, [pc, #260]	; (800059c <HAL_UART_MspInit+0x160>)
 8000496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b3f      	ldr	r3, [pc, #252]	; (800059c <HAL_UART_MspInit+0x160>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PE1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004a8:	2310      	movs	r3, #16
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004b8:	2307      	movs	r3, #7
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	4837      	ldr	r0, [pc, #220]	; (80005a0 <HAL_UART_MspInit+0x164>)
 80004c4:	f000 fcc2 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004d8:	2307      	movs	r3, #7
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	4830      	ldr	r0, [pc, #192]	; (80005a4 <HAL_UART_MspInit+0x168>)
 80004e4:	f000 fcb2 	bl	8000e4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80004e8:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 80004ea:	4a30      	ldr	r2, [pc, #192]	; (80005ac <HAL_UART_MspInit+0x170>)
 80004ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 80004f0:	2210      	movs	r2, #16
 80004f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f4:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 8000514:	2200      	movs	r2, #0
 8000516:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000518:	4823      	ldr	r0, [pc, #140]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 800051a:	f000 fa6c 	bl	80009f6 <HAL_DMA_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000524:	f7ff ff60 	bl	80003e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 800052c:	66da      	str	r2, [r3, #108]	; 0x6c
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <HAL_UART_MspInit+0x16c>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000536:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <HAL_UART_MspInit+0x178>)
 8000538:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <HAL_UART_MspInit+0x174>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_UART_MspInit+0x174>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000554:	2200      	movs	r2, #0
 8000556:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_UART_MspInit+0x174>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000560:	2200      	movs	r2, #0
 8000562:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000566:	f000 fa46 	bl	80009f6 <HAL_DMA_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000570:	f7ff ff3a 	bl	80003e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_UART_MspInit+0x174>)
 8000578:	671a      	str	r2, [r3, #112]	; 0x70
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_UART_MspInit+0x174>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2025      	movs	r0, #37	; 0x25
 8000586:	f000 fa00 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800058a:	2025      	movs	r0, #37	; 0x25
 800058c:	f000 fa19 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013800 	.word	0x40013800
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800
 80005a4:	48001000 	.word	0x48001000
 80005a8:	200000c8 	.word	0x200000c8
 80005ac:	40020044 	.word	0x40020044
 80005b0:	2000010c 	.word	0x2000010c
 80005b4:	40020058 	.word	0x40020058

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000604:	f000 f8a2 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <DMA1_Channel4_IRQHandler+0x10>)
 8000612:	f000 fb0d 	bl	8000c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000c8 	.word	0x200000c8

08000620 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <DMA1_Channel5_IRQHandler+0x10>)
 8000626:	f000 fb03 	bl	8000c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000010c 	.word	0x2000010c

08000634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <USART1_IRQHandler+0x10>)
 800063a:	f002 fb17 	bl	8002c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000044 	.word	0x20000044

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ffd7 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f003 fadd 	bl	8003c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fd99 	bl	80001d4 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80006b0:	08003d08 	.word	0x08003d08
  ldr r2, =_sbss
 80006b4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80006b8:	20000154 	.word	0x20000154

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f94f 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fe8a 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f967 	bl	80009de <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f92f 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000001c 	.word	0x2000001c
 8000744:	20000024 	.word	0x20000024
 8000748:	20000020 	.word	0x20000020

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000024 	.word	0x20000024
 8000770:	20000150 	.word	0x20000150

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000150 	.word	0x20000150

0800078c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000794:	f7ff ffee 	bl	8000774 <HAL_GetTick>
 8000798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a4:	d005      	beq.n	80007b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_Delay+0x44>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007b2:	bf00      	nop
 80007b4:	f7ff ffde 	bl	8000774 <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8f7      	bhi.n	80007b4 <HAL_Delay+0x28>
  {
  }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000024 	.word	0x20000024

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <__NVIC_EnableIRQ+0x38>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff8e 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff29 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff3e 	bl	800081c <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff8e 	bl	80008c8 <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5d 	bl	8000874 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffa2 	bl	8000930 <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d101      	bne.n	8000a0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e037      	b.n	8000a7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2202      	movs	r2, #2
 8000a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f9b8 	bl	8000dd4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}  
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d101      	bne.n	8000aa4 <HAL_DMA_Start_IT+0x20>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e04a      	b.n	8000b3a <HAL_DMA_Start_IT+0xb6>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d13a      	bne.n	8000b2c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2202      	movs	r2, #2
 8000aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0201 	bic.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f94b 	bl	8000d76 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f042 020e 	orr.w	r2, r2, #14
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e00f      	b.n	8000b1a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 020a 	orr.w	r2, r2, #10
 8000b08:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0204 	bic.w	r2, r2, #4
 8000b18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0201 	orr.w	r2, r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e005      	b.n	8000b38 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b34:	2302      	movs	r3, #2
 8000b36:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d008      	beq.n	8000b66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2204      	movs	r2, #4
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e020      	b.n	8000ba8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 020e 	bic.w	r2, r2, #14
 8000b74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d005      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e027      	b.n	8000c26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 020e 	bic.w	r2, r2, #14
 8000be4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0201 	bic.w	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	4798      	blx	r3
    } 
  }
  return status;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d024      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x72>
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d01f      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0204 	bic.w	r2, r2, #4
 8000c7e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c88:	2104      	movs	r1, #4
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d06a      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ca0:	e065      	b.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d02c      	beq.n	8000d0c <HAL_DMA_IRQHandler+0xdc>
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d027      	beq.n	8000d0c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020a 	bic.w	r2, r2, #10
 8000cd8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2102      	movs	r1, #2
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d035      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d0a:	e030      	b.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	2208      	movs	r2, #8
 8000d12:	409a      	lsls	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d028      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d023      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 020e 	bic.w	r2, r2, #14
 8000d34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2101      	movs	r1, #1
 8000d40:	fa01 f202 	lsl.w	r2, r1, r2
 8000d44:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3
    }
  }
}  
 8000d6c:	e7ff      	b.n	8000d6e <HAL_DMA_IRQHandler+0x13e>
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	d108      	bne.n	8000db6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000db4:	e007      	b.n	8000dc6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <DMA_CalcBaseAndBitshift+0x60>)
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d80f      	bhi.n	8000e08 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <DMA_CalcBaseAndBitshift+0x64>)
 8000df0:	4413      	add	r3, r2
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <DMA_CalcBaseAndBitshift+0x68>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	009a      	lsls	r2, r3, #2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <DMA_CalcBaseAndBitshift+0x6c>)
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e06:	e00e      	b.n	8000e26 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <DMA_CalcBaseAndBitshift+0x70>)
 8000e10:	4413      	add	r3, r2
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <DMA_CalcBaseAndBitshift+0x68>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	009a      	lsls	r2, r3, #2
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <DMA_CalcBaseAndBitshift+0x74>)
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40020407 	.word	0x40020407
 8000e38:	bffdfff8 	.word	0xbffdfff8
 8000e3c:	cccccccd 	.word	0xcccccccd
 8000e40:	40020000 	.word	0x40020000
 8000e44:	bffdfbf8 	.word	0xbffdfbf8
 8000e48:	40020400 	.word	0x40020400

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e160      	b.n	800111e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8152 	beq.w	8001118 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d017      	beq.n	8000f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80ac 	beq.w	8001118 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b5e      	ldr	r3, [pc, #376]	; (800113c <HAL_GPIO_Init+0x2f0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a5d      	ldr	r2, [pc, #372]	; (800113c <HAL_GPIO_Init+0x2f0>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	; (800113c <HAL_GPIO_Init+0x2f0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a59      	ldr	r2, [pc, #356]	; (8001140 <HAL_GPIO_Init+0x2f4>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001002:	d025      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x2f8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d01f      	beq.n	800104c <HAL_GPIO_Init+0x200>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d019      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_GPIO_Init+0x300>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1f4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1f0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x30c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1ec>
 8001034:	2306      	movs	r3, #6
 8001036:	e00c      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001038:	2307      	movs	r3, #7
 800103a:	e00a      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800103c:	2305      	movs	r3, #5
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001040:	2304      	movs	r3, #4
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x206>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x206>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x2f4>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HAL_GPIO_Init+0x310>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001094:	4a31      	ldr	r2, [pc, #196]	; (800115c <HAL_GPIO_Init+0x310>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_GPIO_Init+0x310>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <HAL_GPIO_Init+0x310>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_GPIO_Init+0x310>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_GPIO_Init+0x310>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_GPIO_Init+0x310>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_GPIO_Init+0x310>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f ae97 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	48000c00 	.word	0x48000c00
 8001150:	48001000 	.word	0x48001000
 8001154:	48001400 	.word	0x48001400
 8001158:	48001800 	.word	0x48001800
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001166:	af00      	add	r7, sp, #0
 8001168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001170:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001176:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	f001 b83a 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800118a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 816f 	beq.w	800147a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800119c:	4bb5      	ldr	r3, [pc, #724]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4bb2      	ldr	r3, [pc, #712]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d15c      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011b4:	4baf      	ldr	r3, [pc, #700]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d155      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x94>
 80011ee:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	e015      	b.n	8001220 <HAL_RCC_OscConfig+0xc0>
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001210:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800121c:	4b95      	ldr	r3, [pc, #596]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001224:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001228:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001234:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8111 	beq.w	8001478 <HAL_RCC_OscConfig+0x318>
 8001256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800125a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 8108 	bne.w	8001478 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	f000 bfc6 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001272:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x12e>
 8001280:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7b      	ldr	r2, [pc, #492]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e036      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 800128e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x158>
 800129e:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a74      	ldr	r2, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b72      	ldr	r3, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a71      	ldr	r2, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e021      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x184>
 80012ca:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a69      	ldr	r2, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a66      	ldr	r2, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012e4:	4b63      	ldr	r3, [pc, #396]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a62      	ldr	r2, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b60      	ldr	r3, [pc, #384]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001300:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d059      	beq.n	80013c0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fa32 	bl	8000774 <HAL_GetTick>
 8001310:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fa2d 	bl	8000774 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bf67 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001340:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x1fe>
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x22a>
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001376:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800137a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001392:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800139e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ab      	beq.n	8001316 <HAL_RCC_OscConfig+0x1b6>
 80013be:	e05c      	b.n	800147a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff f9d8 	bl	8000774 <HAL_GetTick>
 80013c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ca:	f7ff f9d3 	bl	8000774 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d902      	bls.n	80013e0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	f000 bf0d 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80013e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <HAL_RCC_OscConfig+0x2b2>
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x2de>
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800142e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_RCC_OscConfig+0x314>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001442:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001446:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800144a:	fa92 f2a2 	rbit	r2, r2
 800144e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001452:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001456:	fab2 f282 	clz	r2, r2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f042 0220 	orr.w	r2, r2, #32
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f002 021f 	and.w	r2, r2, #31
 8001466:	2101      	movs	r1, #1
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ab      	bne.n	80013ca <HAL_RCC_OscConfig+0x26a>
 8001472:	e002      	b.n	800147a <HAL_RCC_OscConfig+0x31a>
 8001474:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 817f 	beq.w	800178e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001490:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800149c:	4ba4      	ldr	r3, [pc, #656]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d173      	bne.n	8001590 <HAL_RCC_OscConfig+0x430>
 80014a8:	4ba1      	ldr	r3, [pc, #644]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b4:	d16c      	bne.n	8001590 <HAL_RCC_OscConfig+0x430>
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x386>
 80014e0:	4b93      	ldr	r3, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e013      	b.n	800150e <HAL_RCC_OscConfig+0x3ae>
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800150a:	4b89      	ldr	r3, [pc, #548]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2202      	movs	r2, #2
 8001510:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001514:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001520:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001524:	fab2 f282 	clz	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f002 021f 	and.w	r2, r2, #31
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00a      	beq.n	8001556 <HAL_RCC_OscConfig+0x3f6>
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	f000 be52 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	21f8      	movs	r1, #248	; 0xf8
 800156c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001574:	fa91 f1a1 	rbit	r1, r1
 8001578:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800157c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001580:	fab1 f181 	clz	r1, r1
 8001584:	b2c9      	uxtb	r1, r1
 8001586:	408b      	lsls	r3, r1
 8001588:	4969      	ldr	r1, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e0fe      	b.n	800178e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001594:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8088 	beq.w	80016b2 <HAL_RCC_OscConfig+0x552>
 80015a2:	2301      	movs	r3, #1
 80015a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff f8d1 	bl	8000774 <HAL_GetTick>
 80015d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff f8cc 	bl	8000774 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 be06 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001600:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x4be>
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0x4e6>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001636:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2202      	movs	r2, #2
 8001648:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800164c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001658:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0af      	beq.n	80015d8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	21f8      	movs	r1, #248	; 0xf8
 800168e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001696:	fa91 f1a1 	rbit	r1, r1
 800169a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800169e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016a2:	fab1 f181 	clz	r1, r1
 80016a6:	b2c9      	uxtb	r1, r1
 80016a8:	408b      	lsls	r3, r1
 80016aa:	4921      	ldr	r1, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e06d      	b.n	800178e <HAL_RCC_OscConfig+0x62e>
 80016b2:	2301      	movs	r3, #1
 80016b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	461a      	mov	r2, r3
 80016da:	2300      	movs	r3, #0
 80016dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff f849 	bl	8000774 <HAL_GetTick>
 80016e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff f844 	bl	8000774 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d902      	bls.n	80016fe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f000 bd7e 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001710:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x5d4>
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <HAL_RCC_OscConfig+0x5d0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e016      	b.n	800175c <HAL_RCC_OscConfig+0x5fc>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800174c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001758:	4bbf      	ldr	r3, [pc, #764]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2202      	movs	r2, #2
 800175e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001762:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800176e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ac      	bne.n	80016e8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8113 	beq.w	80019ca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d07c      	beq.n	80018ae <HAL_RCC_OscConfig+0x74e>
 80017b4:	2301      	movs	r3, #1
 80017b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	4ba2      	ldr	r3, [pc, #648]	; (8001a5c <HAL_RCC_OscConfig+0x8fc>)
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	461a      	mov	r2, r3
 80017da:	2301      	movs	r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7fe ffc9 	bl	8000774 <HAL_GetTick>
 80017e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7fe ffc4 	bl	8000774 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d902      	bls.n	80017fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f000 bcfe 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001842:	2202      	movs	r2, #2
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800185c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b7e      	ldr	r3, [pc, #504]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 8001860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001866:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800186a:	2102      	movs	r1, #2
 800186c:	6019      	str	r1, [r3, #0]
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f1a3 	rbit	r1, r3
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001884:	6019      	str	r1, [r3, #0]
  return result;
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d09d      	beq.n	80017e8 <HAL_RCC_OscConfig+0x688>
 80018ac:	e08d      	b.n	80019ca <HAL_RCC_OscConfig+0x86a>
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018d0:	601a      	str	r2, [r3, #0]
  return result;
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x8fc>)
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	461a      	mov	r2, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7fe ff40 	bl	8000774 <HAL_GetTick>
 80018f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7fe ff3b 	bl	8000774 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d902      	bls.n	8001910 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	f000 bc75 	b.w	80021fa <HAL_RCC_OscConfig+0x109a>
 8001910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001914:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001918:	2202      	movs	r2, #2
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001920:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800197a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 800197e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001988:	2102      	movs	r1, #2
 800198a:	6019      	str	r1, [r3, #0]
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f1a3 	rbit	r1, r3
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019a2:	6019      	str	r1, [r3, #0]
  return result;
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d197      	bne.n	80018fa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 81a5 	beq.w	8001d2a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x8f8>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x900>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7fe fe9c 	bl	8000774 <HAL_GetTick>
 8001a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e010      	b.n	8001a64 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7fe fe97 	bl	8000774 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d908      	bls.n	8001a64 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e3d1      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	10908120 	.word	0x10908120
 8001a60:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <HAL_RCC_OscConfig+0xb3c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0e8      	beq.n	8001a42 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x92e>
 8001a80:	4b87      	ldr	r3, [pc, #540]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a86      	ldr	r2, [pc, #536]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	e035      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x958>
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a7c      	ldr	r2, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e020      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x982>
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a74      	ldr	r2, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a71      	ldr	r2, [pc, #452]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x99a>
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a6b      	ldr	r2, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8081 	beq.w	8001c0e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7fe fe32 	bl	8000774 <HAL_GetTick>
 8001b10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe fe2d 	bl	8000774 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e365      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0xa3a>
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	e013      	b.n	8001bc2 <HAL_RCC_OscConfig+0xa62>
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001baa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bca:	2102      	movs	r1, #2
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bea:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d084      	beq.n	8001b16 <HAL_RCC_OscConfig+0x9b6>
 8001c0c:	e083      	b.n	8001d16 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe fdb1 	bl	8000774 <HAL_GetTick>
 8001c12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe fdac 	bl	8000774 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e2e4      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c76:	601a      	str	r2, [r3, #0]
  return result;
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xb44>
 8001c96:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_OscConfig+0xb40>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	e017      	b.n	8001ccc <HAL_RCC_OscConfig+0xb6c>
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4bb3      	ldr	r3, [pc, #716]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	6011      	str	r1, [r2, #0]
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fa92 f1a2 	rbit	r1, r2
 8001ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cea:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cee:	6011      	str	r1, [r2, #0]
  return result;
 8001cf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fab2 f282 	clz	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d180      	bne.n	8001c18 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d16:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a9d      	ldr	r2, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 825e 	beq.w	80021f8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	4b96      	ldr	r3, [pc, #600]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	f000 821f 	beq.w	8002188 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f040 8170 	bne.w	800203c <HAL_RCC_OscConfig+0xedc>
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d80:	601a      	str	r2, [r3, #0]
  return result;
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d8a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fce7 	bl	8000774 <HAL_GetTick>
 8001da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e009      	b.n	8001dc0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fce2 	bl	8000774 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e21c      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001de4:	601a      	str	r2, [r3, #0]
  return result;
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0xcaa>
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	e027      	b.n	8001e5a <HAL_RCC_OscConfig+0xcfa>
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e66:	6011      	str	r1, [r2, #0]
 8001e68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	fa92 f1a2 	rbit	r1, r2
 8001e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e7e:	6011      	str	r1, [r2, #0]
  return result;
 8001e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e84:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d182      	bne.n	8001dac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f023 020f 	bic.w	r2, r3, #15
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a19      	ldr	r1, [r3, #32]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	492d      	ldr	r1, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f0c:	601a      	str	r2, [r3, #0]
  return result;
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f16:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fc21 	bl	8000774 <HAL_GetTick>
 8001f32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f36:	e009      	b.n	8001f4c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe fc1c 	bl	8000774 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e156      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f70:	601a      	str	r2, [r3, #0]
  return result;
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0xe3c>
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0xe38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e02a      	b.n	8001fec <HAL_RCC_OscConfig+0xe8c>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ff0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff8:	6011      	str	r1, [r2, #0]
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	fa92 f1a2 	rbit	r1, r2
 8002008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002010:	6011      	str	r1, [r2, #0]
  return result;
 8002012:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002016:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f042 0220 	orr.w	r2, r2, #32
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f002 021f 	and.w	r2, r2, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	f43f af7f 	beq.w	8001f38 <HAL_RCC_OscConfig+0xdd8>
 800203a:	e0dd      	b.n	80021f8 <HAL_RCC_OscConfig+0x1098>
 800203c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002040:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002060:	601a      	str	r2, [r3, #0]
  return result;
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800206a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	461a      	mov	r2, r3
 800207e:	2300      	movs	r3, #0
 8002080:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fb77 	bl	8000774 <HAL_GetTick>
 8002086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fb72 	bl	8000774 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0ac      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020c4:	601a      	str	r2, [r3, #0]
  return result;
 80020c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_OscConfig+0xf8a>
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e027      	b.n	800213a <HAL_RCC_OscConfig+0xfda>
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80020f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002146:	6011      	str	r1, [r2, #0]
 8002148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fa92 f1a2 	rbit	r1, r2
 8002156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800215a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800215e:	6011      	str	r1, [r2, #0]
  return result;
 8002160:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002164:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d182      	bne.n	800208c <HAL_RCC_OscConfig+0xf2c>
 8002186:	e037      	b.n	80021f8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e02e      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_RCC_OscConfig+0x10a4>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d117      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b09e      	sub	sp, #120	; 0x78
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e162      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b90      	ldr	r3, [pc, #576]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	498b      	ldr	r1, [pc, #556]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e14a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	497f      	ldr	r1, [pc, #508]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80dc 	beq.w	8002434 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d13c      	bne.n	80022fe <HAL_RCC_ClockConfig+0xf6>
 8002284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002288:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_ClockConfig+0xa6>
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	e00f      	b.n	80022ce <HAL_RCC_ClockConfig+0xc6>
 80022ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
 80022bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c0:	663b      	str	r3, [r7, #96]	; 0x60
 80022c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d17b      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0f3      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d13c      	bne.n	8002380 <HAL_RCC_ClockConfig+0x178>
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <HAL_RCC_ClockConfig+0x128>
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	e00f      	b.n	8002350 <HAL_RCC_ClockConfig+0x148>
 8002330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
 800233e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800234c:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002354:	63ba      	str	r2, [r7, #56]	; 0x38
 8002356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800235e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d13a      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b2      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
 8002380:	2302      	movs	r3, #2
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e00d      	b.n	80023c4 <HAL_RCC_ClockConfig+0x1bc>
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	61ba      	str	r2, [r7, #24]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	617a      	str	r2, [r7, #20]
  return result;
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e079      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	491a      	ldr	r1, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe f9b6 	bl	8000774 <HAL_GetTick>
 8002408:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe f9b2 	bl	8000774 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e061      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCC_ClockConfig+0x260>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d214      	bcs.n	800246c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4906      	ldr	r1, [pc, #24]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCC_ClockConfig+0x25c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e040      	b.n	80024e6 <HAL_RCC_ClockConfig+0x2de>
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	491a      	ldr	r1, [pc, #104]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024aa:	f000 f829 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_RCC_ClockConfig+0x2e8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	22f0      	movs	r2, #240	; 0xf0
 80024ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	60fa      	str	r2, [r7, #12]
  return result;
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	40d3      	lsrs	r3, r2
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x2ec>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	fa21 f303 	lsr.w	r3, r1, r3
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_RCC_ClockConfig+0x2f0>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCC_ClockConfig+0x2f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f904 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3778      	adds	r7, #120	; 0x78
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08003cc8 	.word	0x08003cc8
 80024f8:	2000001c 	.word	0x2000001c
 80024fc:	20000020 	.word	0x20000020

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b08b      	sub	sp, #44	; 0x2c
 8002504:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x36>
 800252e:	e03f      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002532:	623b      	str	r3, [r7, #32]
      break;
 8002534:	e03f      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800253c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002540:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	607a      	str	r2, [r7, #4]
  return result;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	40d3      	lsrs	r3, r2
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	220f      	movs	r2, #15
 8002564:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	60fa      	str	r2, [r7, #12]
  return result;
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	e007      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	623b      	str	r3, [r7, #32]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	6a3b      	ldr	r3, [r7, #32]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	372c      	adds	r7, #44	; 0x2c
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08003ce0 	.word	0x08003ce0
 80025d0:	08003cf0 	.word	0x08003cf0

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000001c 	.word	0x2000001c

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025f2:	f7ff ffef 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002600:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002604:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	fa92 f2a2 	rbit	r2, r2
 800260c:	603a      	str	r2, [r7, #0]
  return result;
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	40d3      	lsrs	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_RCC_GetPCLK1Freq+0x40>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	08003cd8 	.word	0x08003cd8

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002636:	f7ff ffcd 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800263a:	4601      	mov	r1, r0
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002644:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002648:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	fa92 f2a2 	rbit	r2, r2
 8002650:	603a      	str	r2, [r7, #0]
  return result;
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	40d3      	lsrs	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x40>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08003cd8 	.word	0x08003cd8

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b092      	sub	sp, #72	; 0x48
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80d4 	beq.w	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002698:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
 80026b0:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe f84b 	bl	8000774 <HAL_GetTick>
 80026de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe f847 	bl	8000774 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1d6      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8084 	beq.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800271c:	429a      	cmp	r2, r3
 800271e:	d07c      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	461a      	mov	r2, r3
 800274a:	2301      	movs	r3, #1
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2300      	movs	r3, #0
 8002770:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002776:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d04b      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fd fff7 	bl	8000774 <HAL_GetTick>
 8002786:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fd fff3 	bl	8000774 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e180      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	61fb      	str	r3, [r7, #28]
  return result;
 80027b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d108      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027ce:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	e00d      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	10908100 	.word	0x10908100
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	4b9a      	ldr	r3, [pc, #616]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	613a      	str	r2, [r7, #16]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	60fa      	str	r2, [r7, #12]
  return result;
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0b7      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800281a:	4b8f      	ldr	r3, [pc, #572]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	498c      	ldr	r1, [pc, #560]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800282c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284c:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f023 0203 	bic.w	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	497f      	ldr	r1, [pc, #508]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4978      	ldr	r1, [pc, #480]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002888:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4970      	ldr	r1, [pc, #448]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f023 0210 	bic.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4969      	ldr	r1, [pc, #420]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	4961      	ldr	r1, [pc, #388]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f023 0220 	bic.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	495a      	ldr	r1, [pc, #360]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	4952      	ldr	r1, [pc, #328]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	494b      	ldr	r1, [pc, #300]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4943      	ldr	r1, [pc, #268]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	493c      	ldr	r1, [pc, #240]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	4934      	ldr	r1, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	4925      	ldr	r1, [pc, #148]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	491e      	ldr	r1, [pc, #120]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	4913      	ldr	r1, [pc, #76]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	490b      	ldr	r1, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3748      	adds	r7, #72	; 0x48
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e040      	b.n	8002b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fcb2 	bl	800043c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fbc4 	bl	800327c <UART_SetConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fd8e 	bl	8003628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fe15 	bl	800376c <UART_CheckIdleState>
 8002b42:	4603      	mov	r3, r0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d178      	bne.n	8002c54 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_UART_Transmit_DMA+0x22>
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e071      	b.n	8002c56 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Transmit_DMA+0x34>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e06a      	b.n	8002c56 <HAL_UART_Transmit_DMA+0x10a>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	; 0x21
 8002baa:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02b      	beq.n	8002c0c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb8:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_UART_Transmit_DMA+0x114>)
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_UART_Transmit_DMA+0x118>)
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_UART_Transmit_DMA+0x11c>)
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3328      	adds	r3, #40	; 0x28
 8002be4:	461a      	mov	r2, r3
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	f7fd ff4c 	bl	8000a84 <HAL_DMA_Start_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e024      	b.n	8002c56 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3308      	adds	r3, #8
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	623a      	str	r2, [r7, #32]
 8002c3e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	6a3a      	ldr	r2, [r7, #32]
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	08003a99 	.word	0x08003a99
 8002c64:	08003b2d 	.word	0x08003b2d
 8002c68:	08003b49 	.word	0x08003b49

08002c6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0ba      	sub	sp, #232	; 0xe8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 82a3 	beq.w	8003210 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
      }
      return;
 8002cd2:	e29d      	b.n	8003210 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8117 	beq.w	8002f0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_UART_IRQHandler+0x298>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 810a 	beq.w	8002f0c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <HAL_UART_IRQHandler+0xbc>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d011      	beq.n	8002d58 <HAL_UART_IRQHandler+0xec>
 8002d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <HAL_UART_IRQHandler+0x11c>
 8002d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2208      	movs	r2, #8
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dba:	f043 0208 	orr.w	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_UART_IRQHandler+0x18a>
 8002dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8209 	beq.w	8003214 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d005      	beq.n	8002e4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04f      	beq.n	8002eee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fdbf 	bl	80039d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d141      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1d9      	bne.n	8002e62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_UART_IRQHandler+0x29c>)
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fe76 	bl	8000bb4 <HAL_DMA_Abort_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	e00f      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9b6 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	e00b      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9b2 	bl	8003250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	e007      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9ae 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002efc:	e18a      	b.n	8003214 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efe:	bf00      	nop
    return;
 8002f00:	e188      	b.n	8003214 <HAL_UART_IRQHandler+0x5a8>
 8002f02:	bf00      	nop
 8002f04:	04000120 	.word	0x04000120
 8002f08:	08003bc5 	.word	0x08003bc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 8143 	bne.w	800319c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 813c 	beq.w	800319c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8135 	beq.w	800319c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	f040 80b1 	bne.w	80030ac <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 815c 	beq.w	8003218 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	f080 8154 	bcs.w	8003218 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f000 8085 	beq.w	8003090 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1da      	bne.n	8002f86 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ff4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ffc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e1      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3308      	adds	r3, #8
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003030:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003032:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003036:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800303e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e3      	bne.n	800300c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	f023 0310 	bic.w	r3, r3, #16
 8003064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003072:	65bb      	str	r3, [r7, #88]	; 0x58
 8003074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e4      	bne.n	8003050 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fd59 	bl	8000b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800309c:	b29b      	uxth	r3, r3
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8dd 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030aa:	e0b5      	b.n	8003218 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a7 	beq.w	800321c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80030ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a2 	beq.w	800321c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e4      	bne.n	80030d8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	623b      	str	r3, [r7, #32]
   return(result);
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003132:	633a      	str	r2, [r7, #48]	; 0x30
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e3      	bne.n	800310e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	60fb      	str	r3, [r7, #12]
   return(result);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f023 0310 	bic.w	r3, r3, #16
 800316c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	617b      	str	r3, [r7, #20]
   return(result);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e4      	bne.n	8003158 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800318e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f865 	bl	8003264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800319a:	e03f      	b.n	800321c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800319c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <HAL_UART_IRQHandler+0x55a>
 80031a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fd40 	bl	8003c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031c4:	e02d      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01c      	beq.n	8003220 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
    }
    return;
 80031ee:	e017      	b.n	8003220 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <HAL_UART_IRQHandler+0x5b6>
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fcf1 	bl	8003bf0 <UART_EndTransmit_IT>
    return;
 800320e:	e008      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003210:	bf00      	nop
 8003212:	e006      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003214:	bf00      	nop
 8003216:	e004      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
      return;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003220:	bf00      	nop
  }

}
 8003222:	37e8      	adds	r7, #232	; 0xe8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <UART_SetConfig+0x274>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <UART_SetConfig+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d120      	bne.n	800333a <UART_SetConfig+0xbe>
 80032f8:	4b7f      	ldr	r3, [pc, #508]	; (80034f8 <UART_SetConfig+0x27c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d817      	bhi.n	8003334 <UART_SetConfig+0xb8>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x90>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003329 	.word	0x08003329
 8003314:	0800332f 	.word	0x0800332f
 8003318:	08003323 	.word	0x08003323
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0b5      	b.n	800348e <UART_SetConfig+0x212>
 8003322:	2302      	movs	r3, #2
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e0b2      	b.n	800348e <UART_SetConfig+0x212>
 8003328:	2304      	movs	r3, #4
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0af      	b.n	800348e <UART_SetConfig+0x212>
 800332e:	2308      	movs	r3, #8
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e0ac      	b.n	800348e <UART_SetConfig+0x212>
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e0a9      	b.n	800348e <UART_SetConfig+0x212>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <UART_SetConfig+0x280>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d124      	bne.n	800338e <UART_SetConfig+0x112>
 8003344:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <UART_SetConfig+0x27c>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003350:	d011      	beq.n	8003376 <UART_SetConfig+0xfa>
 8003352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003356:	d817      	bhi.n	8003388 <UART_SetConfig+0x10c>
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335c:	d011      	beq.n	8003382 <UART_SetConfig+0x106>
 800335e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003362:	d811      	bhi.n	8003388 <UART_SetConfig+0x10c>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <UART_SetConfig+0xf4>
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d006      	beq.n	800337c <UART_SetConfig+0x100>
 800336e:	e00b      	b.n	8003388 <UART_SetConfig+0x10c>
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e08b      	b.n	800348e <UART_SetConfig+0x212>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e088      	b.n	800348e <UART_SetConfig+0x212>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e085      	b.n	800348e <UART_SetConfig+0x212>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e082      	b.n	800348e <UART_SetConfig+0x212>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e07f      	b.n	800348e <UART_SetConfig+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5b      	ldr	r2, [pc, #364]	; (8003500 <UART_SetConfig+0x284>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d124      	bne.n	80033e2 <UART_SetConfig+0x166>
 8003398:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <UART_SetConfig+0x27c>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a4:	d011      	beq.n	80033ca <UART_SetConfig+0x14e>
 80033a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0x160>
 80033ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b0:	d011      	beq.n	80033d6 <UART_SetConfig+0x15a>
 80033b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b6:	d811      	bhi.n	80033dc <UART_SetConfig+0x160>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0x148>
 80033bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c0:	d006      	beq.n	80033d0 <UART_SetConfig+0x154>
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x160>
 80033c4:	2300      	movs	r3, #0
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e061      	b.n	800348e <UART_SetConfig+0x212>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e05e      	b.n	800348e <UART_SetConfig+0x212>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e05b      	b.n	800348e <UART_SetConfig+0x212>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e058      	b.n	800348e <UART_SetConfig+0x212>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e055      	b.n	800348e <UART_SetConfig+0x212>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a47      	ldr	r2, [pc, #284]	; (8003504 <UART_SetConfig+0x288>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d124      	bne.n	8003436 <UART_SetConfig+0x1ba>
 80033ec:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <UART_SetConfig+0x27c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x1a2>
 80033fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x1b4>
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003404:	d011      	beq.n	800342a <UART_SetConfig+0x1ae>
 8003406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x1b4>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x19c>
 8003410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x1a8>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x1b4>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e037      	b.n	800348e <UART_SetConfig+0x212>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e034      	b.n	800348e <UART_SetConfig+0x212>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e031      	b.n	800348e <UART_SetConfig+0x212>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e02e      	b.n	800348e <UART_SetConfig+0x212>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e02b      	b.n	800348e <UART_SetConfig+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a33      	ldr	r2, [pc, #204]	; (8003508 <UART_SetConfig+0x28c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <UART_SetConfig+0x20e>
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <UART_SetConfig+0x27c>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x1f6>
 800344e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x208>
 8003454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003458:	d011      	beq.n	800347e <UART_SetConfig+0x202>
 800345a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x208>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x1f0>
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x1fc>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x208>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x212>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e00a      	b.n	800348e <UART_SetConfig+0x212>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e007      	b.n	800348e <UART_SetConfig+0x212>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e004      	b.n	800348e <UART_SetConfig+0x212>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e001      	b.n	800348e <UART_SetConfig+0x212>
 800348a:	2310      	movs	r3, #16
 800348c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d16c      	bne.n	8003572 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d838      	bhi.n	8003510 <UART_SetConfig+0x294>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x228>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	08003511 	.word	0x08003511
 80034b4:	080034df 	.word	0x080034df
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003511 	.word	0x08003511
 80034c0:	08003511 	.word	0x08003511
 80034c4:	080034e7 	.word	0x080034e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7ff f890 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80034cc:	61b8      	str	r0, [r7, #24]
        break;
 80034ce:	e024      	b.n	800351a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7ff f8ae 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80034d4:	61b8      	str	r0, [r7, #24]
        break;
 80034d6:	e020      	b.n	800351a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <UART_SetConfig+0x290>)
 80034da:	61bb      	str	r3, [r7, #24]
        break;
 80034dc:	e01d      	b.n	800351a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7ff f80f 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80034e2:	61b8      	str	r0, [r7, #24]
        break;
 80034e4:	e019      	b.n	800351a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e015      	b.n	800351a <UART_SetConfig+0x29e>
 80034ee:	bf00      	nop
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40004400 	.word	0x40004400
 8003500:	40004800 	.word	0x40004800
 8003504:	40004c00 	.word	0x40004c00
 8003508:	40005000 	.word	0x40005000
 800350c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	77bb      	strb	r3, [r7, #30]
        break;
 8003518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d075      	beq.n	800360c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	005a      	lsls	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	441a      	add	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d916      	bls.n	800356c <UART_SetConfig+0x2f0>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d212      	bcs.n	800356c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f023 030f 	bic.w	r3, r3, #15
 800354e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b29a      	uxth	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4313      	orrs	r3, r2
 8003560:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e04f      	b.n	800360c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	77bb      	strb	r3, [r7, #30]
 8003570:	e04c      	b.n	800360c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d828      	bhi.n	80035ca <UART_SetConfig+0x34e>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x304>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035bb 	.word	0x080035bb
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035cb 	.word	0x080035cb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f822 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80035a8:	61b8      	str	r0, [r7, #24]
        break;
 80035aa:	e013      	b.n	80035d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7ff f840 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80035b0:	61b8      	str	r0, [r7, #24]
        break;
 80035b2:	e00f      	b.n	80035d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <UART_SetConfig+0x3a8>)
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e00c      	b.n	80035d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7fe ffa1 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80035be:	61b8      	str	r0, [r7, #24]
        break;
 80035c0:	e008      	b.n	80035d4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c6:	61bb      	str	r3, [r7, #24]
        break;
 80035c8:	e004      	b.n	80035d4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	77bb      	strb	r3, [r7, #30]
        break;
 80035d2:	bf00      	nop
    }

    if (pclk != 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085a      	lsrs	r2, r3, #1
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d908      	bls.n	8003608 <UART_SetConfig+0x38c>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d204      	bcs.n	8003608 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e001      	b.n	800360c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003618:	7fbb      	ldrb	r3, [r7, #30]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	007a1200 	.word	0x007a1200

08003628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01a      	beq.n	800373e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d10a      	bne.n	800373e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800377c:	f7fc fffa 	bl	8000774 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d10e      	bne.n	80037ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f82d 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e023      	b.n	80037f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d10e      	bne.n	80037da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f817 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e00d      	b.n	80037f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b09c      	sub	sp, #112	; 0x70
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e0a5      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	f000 80a1 	beq.w	800395c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fc ffab 	bl	8000774 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <UART_WaitOnFlagUntilTimeout+0x32>
 800382a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382c:	2b00      	cmp	r3, #0
 800382e:	d13e      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003844:	667b      	str	r3, [r7, #100]	; 0x64
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003850:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800385c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e6      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3308      	adds	r3, #8
 8003868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003882:	64ba      	str	r2, [r7, #72]	; 0x48
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e067      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d04f      	beq.n	800395c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d147      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e6      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	613b      	str	r3, [r7, #16]
   return(result);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003928:	623a      	str	r2, [r7, #32]
 800392a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	61bb      	str	r3, [r7, #24]
   return(result);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e010      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	429a      	cmp	r2, r3
 8003978:	f43f af4a 	beq.w	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3770      	adds	r7, #112	; 0x70
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003986:	b480      	push	{r7}
 8003988:	b089      	sub	sp, #36	; 0x24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	60bb      	str	r3, [r7, #8]
   return(result);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b095      	sub	sp, #84	; 0x54
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	643b      	str	r3, [r7, #64]	; 0x40
 80039fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d118      	bne.n	8003a7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a8c:	bf00      	nop
 8003a8e:	3754      	adds	r7, #84	; 0x54
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b090      	sub	sp, #64	; 0x40
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d037      	beq.n	8003b1e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	69b9      	ldr	r1, [r7, #24]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	617b      	str	r3, [r7, #20]
   return(result);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b1c:	e002      	b.n	8003b24 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8003b1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b20:	f7ff fb82 	bl	8003228 <HAL_UART_TxCpltCallback>
}
 8003b24:	bf00      	nop
 8003b26:	3740      	adds	r7, #64	; 0x40
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff fb7e 	bl	800323c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d109      	bne.n	8003b84 <UART_DMAError+0x3c>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b21      	cmp	r3, #33	; 0x21
 8003b74:	d106      	bne.n	8003b84 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff ff01 	bl	8003986 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d109      	bne.n	8003ba6 <UART_DMAError+0x5e>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b22      	cmp	r3, #34	; 0x22
 8003b96:	d106      	bne.n	8003ba6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f7ff ff16 	bl	80039d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff fb4a 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fb34 	bl	8003250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	613b      	str	r3, [r7, #16]
   return(result);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e6      	bne.n	8003bf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff faf6 	bl	8003228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3c:	bf00      	nop
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <__libc_init_array>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	4d0d      	ldr	r5, [pc, #52]	; (8003c90 <__libc_init_array+0x38>)
 8003c5c:	4c0d      	ldr	r4, [pc, #52]	; (8003c94 <__libc_init_array+0x3c>)
 8003c5e:	1b64      	subs	r4, r4, r5
 8003c60:	10a4      	asrs	r4, r4, #2
 8003c62:	2600      	movs	r6, #0
 8003c64:	42a6      	cmp	r6, r4
 8003c66:	d109      	bne.n	8003c7c <__libc_init_array+0x24>
 8003c68:	4d0b      	ldr	r5, [pc, #44]	; (8003c98 <__libc_init_array+0x40>)
 8003c6a:	4c0c      	ldr	r4, [pc, #48]	; (8003c9c <__libc_init_array+0x44>)
 8003c6c:	f000 f820 	bl	8003cb0 <_init>
 8003c70:	1b64      	subs	r4, r4, r5
 8003c72:	10a4      	asrs	r4, r4, #2
 8003c74:	2600      	movs	r6, #0
 8003c76:	42a6      	cmp	r6, r4
 8003c78:	d105      	bne.n	8003c86 <__libc_init_array+0x2e>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c80:	4798      	blx	r3
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7ee      	b.n	8003c64 <__libc_init_array+0xc>
 8003c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8a:	4798      	blx	r3
 8003c8c:	3601      	adds	r6, #1
 8003c8e:	e7f2      	b.n	8003c76 <__libc_init_array+0x1e>
 8003c90:	08003d00 	.word	0x08003d00
 8003c94:	08003d00 	.word	0x08003d00
 8003c98:	08003d00 	.word	0x08003d00
 8003c9c:	08003d04 	.word	0x08003d04

08003ca0 <memset>:
 8003ca0:	4402      	add	r2, r0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <_init>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

08003cbc <_fini>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr
